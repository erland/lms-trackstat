<?xml version="1.0" encoding="utf-8"?>
<databasequery>
	<dataquery>
		<name>[% queryname %]</name>
		<querytree>
			<queryid>missingtracks</queryid>
			<query>
				select 'Missing entries in TrackStat' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt  'Number of' from 
					(select count(*) as cnt from tracks where audio=1) t1,
					(select count(*) as cnt from track_statistics,tracks where tracks.urlmd5=track_statistics.urlmd5 and tracks.audio=1) t2
			</query>
			<querytree>
				<queryid>tracks</queryid>
				<query>
					select tracks.tracknum,tracks.title,albums.title,length(tracks.url) as lengthofurl,tracks.url from tracks
						left join albums on
							tracks.album=albums.id
						left join track_statistics on
							tracks.urlmd5=track_statistics.urlmd5
						where
							tracks.audio=1 and
							track_statistics.url is null
					order by albums.titlesort,tracks.disc,tracks.tracknum
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicate_entries</queryid>
			<query>
				select 'Duplicate entries in TrackStat statistics' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from track_statistics where url in (select url from track_statistics 
					group by url having count(*)>1)
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select count(*) as 'Number of duplicates',url from track_statistics
						group by url having count(*)>1
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicate_history_entries</queryid>
			<query>
				select 'Duplicate entries in TrackStat history' as 'Problem type',if(sum(cnt)>0,'Yes','No') as 'Possible problem', sum(cnt) as 'Number of' from (select count(*) as cnt from track_history 
						group by url,played,rating having count(*)>1) as a
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select count(*),url,played,rating from track_history 
						group by url,played,rating having count(*)>1
						order by url,played
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>notrefreshedtracks</queryid>
			<query>
				select 'Not refreshed entries in TrackStat' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt  'Number of' from 
					(select count(*) as cnt from track_statistics,tracks where tracks.musicbrainz_id=track_statistics.musicbrainz_id and audio=1 and track_statistics.musicbrainz_id is not null) t1,
					(select count(*) as cnt from track_statistics,tracks where tracks.urlmd5=track_statistics.urlmd5 and track_statistics.musicbrainz_id is not null and tracks.musicbrainz_id=track_statistics.musicbrainz_id and tracks.audio=1) t2
			</query>
		</querytree>
		<querytree>
			<queryid>notrefreshedhistorytracks</queryid>
			<query>
				select 'Not refreshed entries in TrackStat history' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt 'Number of' from 
					(select count(*) as cnt from track_history,track_statistics,tracks where track_history.urlmd5=track_statistics.urlmd5 and tracks.musicbrainz_id=track_statistics.musicbrainz_id and audio=1 and track_statistics.musicbrainz_id is not null) t1,
					(select count(*) as cnt from track_history,track_statistics,tracks where track_history.urlmd5=track_statistics.urlmd5 and tracks.urlmd5=track_statistics.urlmd5 and track_statistics.musicbrainz_id is not null and tracks.musicbrainz_id=track_statistics.musicbrainz_id and tracks.audio=1) t2
			</query>
		</querytree>
		<querytree>
			<queryid>unusedtracks</queryid>
			<query>
				select 'Unused entries in TrackStat data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from track_statistics) t1,
					(select count(*) as cnt from track_statistics,tracks where tracks.urlmd5=track_statistics.urlmd5 and tracks.audio=1) t2;
			</query>
			<querytree>
				<queryid>tracks</queryid>
				<query>
					select track_statistics.rating,track_statistics.playcount,from_unixtime(track_statistics.lastplayed) as lastplayed,from_unixtime(track_statistics.added) as added,track_statistics.url from track_statistics
						left join tracks on
							tracks.urlmd5=track_statistics.urlmd5 and
							tracks.audio=1
					where 
						tracks.url is null
					order by track_statistics.url
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>unusedhistorytracks</queryid>
			<query>
				select 'Unused entries in TrackStat history' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from track_history) t1,
					(select count(*) as cnt from track_history,tracks where tracks.urlmd5=track_history.urlmd5 and tracks.audio=1) t2;
			</query>
			<querytree>
				<queryid>tracks</queryid>
				<query>
					select from_unixtime(track_history.played) as played,track_history.rating,track_history.url from track_history
						left join tracks on
							tracks.urlmd5=track_history.urlmd5 and
							tracks.audio=1
						where 
							tracks.url is null
					order by track_history.played desc
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>reallylongurls</queryid>
			<query>
				select 'Songs with really long urls (Longer than 511 characters)' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from tracks 
					where audio=1 and length(url)&gt;511
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select tracks.id,tracks.tracknum,tracks.title,tracks.url from tracks
					where
						audio=1 and length(url)&gt;511
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>longurls</queryid>
			<query>
				select 'Songs with long urls (Longer than 255 and shorter than 511 characters)' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from tracks 
					where audio=1 and length(url)&gt;255 and length(url)&lt;512
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select tracks.id,tracks.tracknum,tracks.title,tracks.url from tracks
					where
						audio=1 and length(url)&gt;255 and length(url)&lt;512
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>urlmd5</queryid>
			<query>
				select 'Songs with invalid urlmd5 entries' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from track_statistics 
					where 
						urlmd5!=md5(url)
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select url,urlmd5 from track_statistics
					where
						track_statistics.urlmd5!=md5(url)
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>urlmd5_history</queryid>
			<query>
				select 'History entries with invalid urlmd5 entries' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from track_history 
					where 
						urlmd5!=md5(url)
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select url,urlmd5 from track_history
					where
						urlmd5!=md5(url)
				</query>
			</querytree>
		</querytree>
	</dataquery>
</databasequery>

